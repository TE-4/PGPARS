// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PGPARS.Data;

#nullable disable

namespace PGPARS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250417054055_ProgressBArs")]
    partial class ProgressBArs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PGPARS.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastAssignedInterview")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastAssignedReview")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastCompletedInterview")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastCompletedReview")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PGPARS.Models.Applicant", b =>
                {
                    b.Property<string>("Nnumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdvisorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AppSubmitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedMentor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenshipStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Cohort")
                        .HasColumnType("int");

                    b.Property<bool?>("Course_Req_Met")
                        .HasColumnType("bit");

                    b.Property<string>("CrsReqComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPAComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GPAOverall")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GPAPsych")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GradAcceptStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasUnfEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnrolled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mentor1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mentor2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mentor3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mentor4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissingItems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfReviews")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryCitizenship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Rev1Decision")
                        .HasColumnType("bit");

                    b.Property<bool?>("Rev2Decision")
                        .HasColumnType("bit");

                    b.Property<bool?>("RevAgree")
                        .HasColumnType("bit");

                    b.Property<decimal?>("School1GPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("School1Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School1Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharePointPdfUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nnumber");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("PGPARS.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("PGPARS.Models.Funding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Cohort")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FundType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfTW")
                        .HasColumnType("int");

                    b.Property<decimal?>("Remaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Scholarship")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Stipends")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Fundings");
                });

            modelBuilder.Entity("PGPARS.Models.FundingAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllocatedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AllocatedNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FundingID")
                        .HasColumnType("int");

                    b.Property<string>("Nnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("StipendValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("TuitionWaiver")
                        .HasColumnType("bit");

                    b.Property<string>("TuitionWaiverType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FundingID");

                    b.HasIndex("Nnumber");

                    b.ToTable("FundingAllocations");
                });

            modelBuilder.Entity("PGPARS.Models.Review", b =>
                {
                    b.Property<int>("ReviewNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewNumber"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cohort")
                        .HasColumnType("int");

                    b.Property<string>("DecisionRecommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FollowUpRequired")
                        .HasColumnType("bit");

                    b.Property<string>("LORComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LORQuality")
                        .HasColumnType("int");

                    b.Property<int?>("LORRelevance")
                        .HasColumnType("int");

                    b.Property<int?>("LetterQuality")
                        .HasColumnType("int");

                    b.Property<string>("Nnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OverallFitComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OverallFitQuality")
                        .HasColumnType("int");

                    b.Property<int?>("ResExpQuality")
                        .HasColumnType("int");

                    b.Property<string>("ResumeComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResumeQuality")
                        .HasColumnType("int");

                    b.Property<bool>("ReviewComplete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReviewEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("WritingSampleComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WritingSampleQuality")
                        .HasColumnType("int");

                    b.HasKey("ReviewNumber");

                    b.HasIndex("AppUserId");

                    b.HasIndex("Nnumber");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGPARS.Models.FundingAllocation", b =>
                {
                    b.HasOne("PGPARS.Models.Funding", "Funding")
                        .WithMany("FundingAllocations")
                        .HasForeignKey("FundingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGPARS.Models.Applicant", "Applicant")
                        .WithMany("FundingAllocations")
                        .HasForeignKey("Nnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Funding");
                });

            modelBuilder.Entity("PGPARS.Models.Review", b =>
                {
                    b.HasOne("PGPARS.Models.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGPARS.Models.Applicant", "Applicant")
                        .WithMany("Reviews")
                        .HasForeignKey("Nnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("PGPARS.Models.AppUser", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PGPARS.Models.Applicant", b =>
                {
                    b.Navigation("FundingAllocations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PGPARS.Models.Funding", b =>
                {
                    b.Navigation("FundingAllocations");
                });
#pragma warning restore 612, 618
        }
    }
}
