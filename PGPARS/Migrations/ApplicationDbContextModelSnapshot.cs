// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PGPARS.Data;

#nullable disable

namespace PGPARS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppUserApplicant", b =>
                {
                    b.Property<string>("AssignedApplicantsNnumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedReviewersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssignedApplicantsNnumber", "AssignedReviewersId");

                    b.HasIndex("AssignedReviewersId");

                    b.ToTable("AppUserApplicant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PGPARS.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MainRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PGPARS.Models.Applicant", b =>
                {
                    b.Property<string>("Nnumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdvisorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AppSubmitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommitteeReview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Course_Req_Met")
                        .HasColumnType("bit");

                    b.Property<string>("CrsReqComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DecRec")
                        .HasColumnType("bit");

                    b.Property<string>("FinalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FollowUp")
                        .HasColumnType("bit");

                    b.Property<string>("GPAComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GPAOverall")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GPAPsych")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LORComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LORQuality")
                        .HasColumnType("int");

                    b.Property<int?>("LORRelevance")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LetterQuality")
                        .HasColumnType("int");

                    b.Property<string>("Mentor1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mentor2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mentor3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallFitComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OverallFitQuality")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResExpQuality")
                        .HasColumnType("int");

                    b.Property<string>("ResumeComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResumeQuality")
                        .HasColumnType("int");

                    b.Property<bool?>("Rev1Decision")
                        .HasColumnType("bit");

                    b.Property<bool?>("Rev2Decision")
                        .HasColumnType("bit");

                    b.Property<bool?>("RevAgree")
                        .HasColumnType("bit");

                    b.Property<string>("Reviewer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reviewer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectMentor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WritSampComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WritSampQuality")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nnumber");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("PGPARS.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("PGPARS.Models.Funding", b =>
                {
                    b.Property<int>("FundingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundingID"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Cohort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FundingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nnumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("Scholarships")
                        .HasColumnType("float");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Stipends")
                        .HasColumnType("float");

                    b.HasKey("FundingID");

                    b.HasIndex("Nnumber");

                    b.ToTable("Fundings");
                });

            modelBuilder.Entity("PGPARS.Models.FundingAllocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllocatedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FundingID")
                        .HasColumnType("int");

                    b.Property<int>("FundingSourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FundingID");

                    b.ToTable("FundingAllocations");
                });

            modelBuilder.Entity("PGPARS.Models.Review", b =>
                {
                    b.Property<int>("ReviewNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewNumber"));

                    b.Property<double?>("AllGPA")
                        .HasColumnType("float");

                    b.Property<string>("ApplicantNnumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseReqComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CourseReqMet")
                        .HasColumnType("bit");

                    b.Property<string>("DecRec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FollowUp")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPAComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LORComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LORQuality")
                        .HasColumnType("int");

                    b.Property<int?>("LORRelevance")
                        .HasColumnType("int");

                    b.Property<int?>("LetterQuality")
                        .HasColumnType("int");

                    b.Property<string>("NNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallFitComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OverallFitQuality")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PsychGPA")
                        .HasColumnType("float");

                    b.Property<int?>("ResExpQuality")
                        .HasColumnType("int");

                    b.Property<string>("ResumeComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResumeQuality")
                        .HasColumnType("int");

                    b.Property<string>("Reviewer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WritingSampleComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WritingSampleQuality")
                        .HasColumnType("int");

                    b.HasKey("ReviewNumber");

                    b.HasIndex("ApplicantNnumber");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AppUserApplicant", b =>
                {
                    b.HasOne("PGPARS.Models.Applicant", null)
                        .WithMany()
                        .HasForeignKey("AssignedApplicantsNnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AssignedReviewersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PGPARS.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGPARS.Models.Funding", b =>
                {
                    b.HasOne("PGPARS.Models.Applicant", "Applicant")
                        .WithMany("Fundings")
                        .HasForeignKey("Nnumber");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("PGPARS.Models.FundingAllocations", b =>
                {
                    b.HasOne("PGPARS.Models.Funding", null)
                        .WithMany("FundingAllocations")
                        .HasForeignKey("FundingID");
                });

            modelBuilder.Entity("PGPARS.Models.Review", b =>
                {
                    b.HasOne("PGPARS.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantNnumber");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("PGPARS.Models.Applicant", b =>
                {
                    b.Navigation("Fundings");
                });

            modelBuilder.Entity("PGPARS.Models.Funding", b =>
                {
                    b.Navigation("FundingAllocations");
                });
#pragma warning restore 612, 618
        }
    }
}
